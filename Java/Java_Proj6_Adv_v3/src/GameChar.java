import java.io.Serializable;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Sandman
 */
public class GameChar extends javax.swing.JFrame implements Serializable{
    private final char north = 'N';
    private final char south = 'S';
    private final char east = 'E';
    private final char west = 'W';
    private String saveFileName = "";
    private JFileChooser chooser;
    /**
     * Creates new form Map
     */
    public GameChar(String input) throws IOException {
        initComponents();
        map1.Init(input);
        userInput.addKeyListener( new KeyAdapter() {
            @Override
            public void keyReleased( KeyEvent e ) {
                if( e.getKeyCode() == KeyEvent.VK_ENTER ) {
                    String temp = userInput.getText();
                    userInput.setText("");
                    userOutput.append(temp + "\n");
                    String parts[];
                    switch (Character.toUpperCase(temp.charAt(0))) {
                        case 'G': // "Go"
                        {
                            //Split string and read the direction
                            parts = (temp.split(" "));
                            String moveResult;
                            moveResult=map1.Go(Character.toUpperCase(parts[1].charAt(0)));
                            if(moveResult.equals("out")){
                                System.out.println("By the gods, we've hit the edge of the world!");
                            } else if(!moveResult.equals(""))
                                userOutput.append(moveResult);
                            repaint();
                            break;
                        }
                        case 'I': // Inventory
                            userOutput.append(map1.Inventory());
                            break;
                        case 'T': // Take new item into inventory
                            parts = (temp.split(" "));
                            String takeItem = "";
                            for(int i = 0; i < parts.length; i++) {
                                if(i!=0 && i!=parts.length-1)
                                    takeItem+=parts[i] + " ";
                                if(i == parts.length-1)
                                    takeItem+=parts[i];
                            }
                            userOutput.append(map1.Take(takeItem));
                            break;
                        case 'D': // Drop inventory item
                            parts = (temp.split(" "));
                            String dropItem = "";
                            for(int i = 0; i < parts.length; i++) {
                                if(i!=0 && i!=parts.length-1)
                                    dropItem+=(parts[i] + " ");
                                if(i == parts.length-1)
                                    dropItem+=parts[i];
                            }
                            userOutput.append(map1.Drop(dropItem));
                            break;
                        default: // Invalid selection
                            System.out.println("I don't follow Cap'n");
                            break;
                    }
                    userOutput.append(map1.GetCoord() + "\n");
                }
            }
        });
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userOutput = new javax.swing.JTextArea();
        open = new javax.swing.JButton();
        save = new javax.swing.JButton();
        quit = new javax.swing.JButton();
        map1 = new Map();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userInputKeyPressed(evt);
            }
        });

        userOutput.setEditable(false);
        userOutput.setColumns(20);
        userOutput.setLineWrap(true);
        userOutput.setRows(5);
        jScrollPane1.setViewportView(userOutput);

        open.setText("Open");
        open.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        quit.setText("Quit");
        quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(userInput))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(open, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(save, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(quit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(map1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(map1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(userInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(open)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(save)
                        .addGap(18, 18, 18)
                        .addComponent(quit, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userInputKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_userInputKeyPressed

    private void quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_quitActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        // show file chooser dialog
        int result = chooser.showSaveDialog(null);
        // if file selected, set it as icon of the label
        if (result == JFileChooser.APPROVE_OPTION) {
            saveFileName = chooser.getSelectedFile().getPath();
            try {
                FileOutputStream fos = new FileOutputStream(saveFileName);
                try (ObjectOutputStream oos = new ObjectOutputStream(fos)) {
                    map1.writeObject(oos);
                    // oos.defaultWriteObject();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GameChar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(GameChar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }        
    }//GEN-LAST:event_saveActionPerformed

    private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        // show file chooser dialog
        int result = chooser.showOpenDialog(null);
        // if file selected, set it as icon of the label
        if (result == JFileChooser.APPROVE_OPTION) {
            saveFileName = chooser.getSelectedFile().getPath();
            try {
                FileInputStream fin = new FileInputStream(saveFileName);
                try (ObjectInputStream ois = new ObjectInputStream(fin)) {
                    map1.readObject(ois);
                    // ois.defaultReadObject();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GameChar.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(GameChar.class.getName()).log(Level.SEVERE, null, ex);
            }
            repaint();
        }            
    }//GEN-LAST:event_openActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String ipt) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameChar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameChar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameChar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameChar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new GameChar(ipt).setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(GameChar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private Map map1;
    private javax.swing.JButton open;
    private javax.swing.JButton quit;
    private javax.swing.JButton save;
    private javax.swing.JTextField userInput;
    private javax.swing.JTextArea userOutput;
    // End of variables declaration//GEN-END:variables
}
